/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package practica_2;

import java.sql.SQLException;
import java.util.Arrays;
import java.util.List;

import org.jasypt.util.password.StrongPasswordEncryptor;

import io.javalin.Javalin;
import io.javalin.core.util.RouteOverviewPlugin;
import io.javalin.http.staticfiles.Location;
import practica_2.controladores.*;
import practica_2.entidades.Producto;
import practica_2.entidades.ProductoVendido;
import practica_2.entidades.Usuario;
import practica_2.services.BootStrapServices;
import practica_2.services.ProductoServices;
import practica_2.services.ProductoVendidoServices;
import practica_2.services.UsuarioServices;

public class Main {

    static StrongPasswordEncryptor passwordEncryptor = new StrongPasswordEncryptor();
    private static String modoConexion = "";

    public static void main(String[] args) throws SQLException {

        String mensaje = "Software ORM - JPA";
        System.out.println(mensaje);
        if(args.length >= 1){
            modoConexion = args[0];
            System.out.println("Modo de Operacion: "+modoConexion);
        }

        //Iniciando la base de datos.
        if(modoConexion.isEmpty()) {
            BootStrapServices.getInstancia().init();
        }

        Javalin app = Javalin.create(config -> {
            if (UsuarioServices.getInstancia().listar().size() == 0) {
                Usuario primerAdmin = new Usuario("admin", "admin", passwordEncryptor.encryptPassword("admin"));
                primerAdmin.setAdmin(true);
                UsuarioServices.getInstancia()
                        .crear(primerAdmin);
            }
            // Si la carpeta /publico no tiene ningún archivo, el build de Gradle fallará.
             config.addStaticFiles("/publico");
            // config.registerPlugin(new RouteOverviewPlugin("/rutas"));
        }).start(getHerokuAssignedPort());

        new LoginControlador(app).aplicarRutas();
        new CookiesSesionesControlador(app).aplicarRutas();
        new CrudControlador(app).aplicarRutas();
        new CarroCompraControlador(app).aplicarRutas();

    }

    static int getHerokuAssignedPort() {
        ProcessBuilder processBuilder = new ProcessBuilder();
        if (processBuilder.environment().get("PORT") != null) {
            return Integer.parseInt(processBuilder.environment().get("PORT"));
        }
        return 7000; //Retorna el puerto por defecto en caso de no estar en Heroku.
    }

    public static String getModoConexion(){
        return modoConexion;
    }
}
